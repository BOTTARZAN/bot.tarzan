const { default: makeWASocket, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const fs = require('fs');
const express = require('express');
const qrcode = require('qrcode');

// ุงุณุชุฎุฏู ูุฌูุฏ auth
const { state, saveCreds } = await useMultiFileAuthState('./auth');

// ุฅุนุฏุงุฏ ุตูุญุฉ QR
const app = express();
app.use(express.static('public'));
app.listen(3000, () => {
  console.log("โ ุตูุญุฉ QR ุฌุงูุฒุฉ ุนูู http://localhost:3000");
});

async function startBot() {
  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true
  });

  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('connection.update', async ({ connection, qr }) => {
    if (qr) {
      await qrcode.toFile('./public/qr.png', qr);
      console.log("๐ธ ุชู ุฅูุดุงุก ุฑูุฒ QR");
    }

    if (connection === 'open') {
      console.log("โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ");
    } else if (connection === 'close') {
      console.log("โ ุงูุงุชุตุงู ูุบูู... ุฅุนุงุฏุฉ ุงููุญุงููุฉ");
      startBot();
    }
  });

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message || msg.key.fromMe) return;
    const text = msg.message.conversation || msg.message.extendedTextMessage?.text;
    const reply = (t) => sock.sendMessage(msg.key.remoteJid, { text: t });

    if (text?.toLowerCase().includes('ุงุฐูุงุฑ')) {
      reply("๐ฟ ุฃุฐูุงุฑ ุงูุตุจุงุญ:\nุฃุตุจุญูุง ูุฃุตุจุญ ุงูููู ููู...");
    } else if (text?.toLowerCase().includes('ุฏุนุงุก')) {
      reply("๐คฒ ุฏุนุงุก ุงูููู:\nุงูููู ุฅูู ุฃุณุฃูู ุงูุนูู ูุงูุนุงููุฉ...");
    } else if (text?.toLowerCase().includes('ุญุฏูุซ')) {
      reply("๐ ุญุฏูุซ ุดุฑูู:\nูุงู ุฑุณูู ุงููู ๏ทบ: 'ุงูุฏูู ุงููุตูุญุฉ'");
    }
  });
}

startBot();
